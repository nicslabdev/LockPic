0a1,2
> /* Please! Split into stb_image.h and stb_image.cpp */
> 
64,65c66,79
< #ifndef STBI_INCLUDE_STB_IMAGE_H
< #define STBI_INCLUDE_STB_IMAGE_H
---
> // Modifications for the LockPic project:
> // Copyright (C) 2014  Carlos Parés: carlosparespulido (at) gmail (dot) com
> // This program is free software: you can redistribute it and/or modify
> // it under the terms of the GNU General Public License as published by
> // the Free Software Foundation, either version 3 of the License, or
> // (at your option) any later version.
> //
> // This program is distributed in the hope that it will be useful,
> // but WITHOUT ANY WARRANTY; without even the implied warranty of
> // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
> // GNU General Public License for more details.
> //
> // You should have received a copy of the GNU General Public License
> // along with this program.  If not, see <http://www.gnu.org/licenses/>.
67,69d80
< // To get a header file for this, either cut and paste the header,
< // or create stb_image.h, #define STBI_HEADER_FILE_ONLY, and
< // then include stb_image.c from it.
226a238
> extern stbi_uc *stbi_load_dec        (int decode, char const *filename, int *x, int *y, int *comp, int req_comp, int squareNum, int *horizStart, int *horizEnd, int *vertStart, int *vertEnd, unsigned char **keys, const char * pic_id);
331a344,359
> 
> 
> 
> 
> #include <android/log.h>
> #include <openssl/evp.h>
> #include <openssl/aes.h>
> 
> #ifndef STBI_INCLUDE_STB_IMAGE_H
> #define STBI_INCLUDE_STB_IMAGE_H
> 
> // To get a header file for this, either cut and paste the header,
> // or create stb_image.h, #define STBI_HEADER_FILE_ONLY, and
> // then include stb_image.c from it.
> #include "stb_image.h"
> 
406a435,438
>    
>    int decode;
>    int squareNum;
>    int *horizStart, *horizEnd, *vertStart, *vertEnd;
408a441,457
> static int should_square_be_decoded(stbi *s, int x, int y)
> {
> 	int i;
> 	int ret = -1;
> 	for(i=0; i<s->squareNum; i++)  {
> 		if( ret == -1
> 			&& x >= s->horizStart[i]
> 		    && x <= s->horizEnd[i]
> 			&& y >= s->vertStart[i]
> 			&& y <= s->vertEnd[i] )
> 			ret = i;
> 	}
> //	return (ret == -1 ? -1 : 0);
> 	return ret;
> //	return 0;
> }
> 
572a622,730
> 
> // Additional structures for encryption/decryption
> EVP_CIPHER_CTX *de;
> unsigned int salt[] = {12345, 54321};
> //unsigned char *m_key_data = (unsigned char*)"KeyData";
> //int m_key_data_len = 7;
> // End additional structures
> 
> 
> /** The following code implements AES crypto through OpenSSL.
>  * Based on Saju Pillai's work at:
>  http://saju.net.in/code/misc/openssl_aes.c.txt **/
> 
> int aes_init(unsigned char *key_data, int key_data_len, unsigned char *salt, EVP_CIPHER_CTX *d_ctx)
> {
>   int i, nrounds = 5;
>   unsigned char key[32], iv[32];
>   /*
>    * Gen key & IV for AES 256 CBC mode. A SHA1 digest is used to hash the supplied key material.
>    * nrounds is the number of times the we hash the material. More rounds are more secure but
>    * slower.
>    */
>   i = EVP_BytesToKey(EVP_aes_256_ofb(), EVP_sha1(), salt, key_data, key_data_len, nrounds, key, iv);
> 
>   if (i != 32) {
> 	  __android_log_print(ANDROID_LOG_ERROR, "Test", "Key size is %d bits - should be 256 bits\n", i);
>     return -1;
>   }
> 
> //  EVP_CIPHER_CTX_init(e_ctx);
> //  EVP_EncryptInit_ex(e_ctx, EVP_aes_256_ofb(), NULL, key, iv);
>   EVP_CIPHER_CTX_init(d_ctx);
>   EVP_DecryptInit_ex(d_ctx, EVP_aes_256_ofb(), NULL, key, iv);
> 
>   return 0;
> }
> 
> //unsigned char *aes_encrypt(EVP_CIPHER_CTX *e, unsigned char *plaintext, int *len)
> //{
> //  /* max ciphertext len for a n bytes of plaintext is n + AES_BLOCK_SIZE -1 bytes */
> //  int c_len = *len + AES_BLOCK_SIZE, f_len = 0;
> //  unsigned char *ciphertext = (unsigned char*) malloc(c_len);
> //  /* allows reusing of 'e' for multiple encryption cycles */
> ////  EVP_EncryptInit_ex(e, NULL, NULL, NULL, NULL);
> //  /* update ciphertext, c_len is filled with the length of ciphertext generated,
> //    *len is the size of plaintext in bytes */
> //  EVP_EncryptUpdate(e, ciphertext, &c_len, plaintext, *len);
> //
> //  /* update ciphertext with the final remaining bytes */
> ////  EVP_EncryptFinal_ex(e, ciphertext+c_len, &f_len);
> //  *len = c_len + f_len;
> //  return ciphertext;
> //}
> 
> unsigned char *aes_decrypt(EVP_CIPHER_CTX *e, unsigned char *ciphertext, int *len)
> {
>   /* because we have padding ON, we must allocate an extra cipher block size of memory */
>   int p_len = *len, f_len = 0;
>   unsigned char *plaintext = (unsigned char*)malloc(p_len + AES_BLOCK_SIZE);
> 
> //  EVP_DecryptInit_ex(e, NULL, NULL, NULL, NULL);
>   EVP_DecryptUpdate(e, plaintext, &p_len, ciphertext, *len);
> //  EVP_DecryptFinal_ex(e, plaintext+p_len, &f_len);
> 
>   *len = p_len + f_len;
>   return plaintext;
> }
> 
> unsigned char *stbi_load_dec(int decode, char const *filename, int *x, int *y, int *comp, int req_comp, int squareNum, int *horizStart, int *horizEnd, int *vertStart, int *vertEnd, unsigned char **keys, char const * pic_id)
> {
>    FILE *f = fopen(filename, "rb");
>    unsigned char *result;
>    if (!f) return epuc("can't fopen", "Unable to open file");
>    stbi s;
> 
> //   salt[0] = (unsigned int *)pic_id;
> //   salt[1] = (unsigned int *)(pic_id + 1);
>    de = (EVP_CIPHER_CTX*) malloc((squareNum)*sizeof(EVP_CIPHER_CTX));
>    int i;
>    int sum = 0;
>      for(i=0; i < strlen(pic_id); i++)  {
>    	  sum += (int)(pic_id[i]);
>      }
>      salt[0] = (unsigned int)(sum & 0xFF);
>      salt[1] = (unsigned int)((sum >> 8) & 0xFF);
> 
>      for(i=0; i<squareNum; i++)  {
> //   	  aes_init(keys[i], strlen((char const*)(keys[i])), (unsigned char *)&salt, &(de[i]));
>    	  aes_init(keys[i], strlen((char const*)(keys[i])), (unsigned char *)&salt, &de[i]);
>      }
> //   if(aes_init(key_data, key_data_len, (unsigned char *)&salt, &en, &de))
> //   	  return NULL;
> 
> 
>    start_file(&s,f);
>    s.decode = decode;
>    s.squareNum = squareNum;
>    s.horizStart = horizStart;
>    s.horizEnd = horizEnd;
>    s.vertStart = vertStart;
>    s.vertEnd = vertEnd;
>    result = stbi_load_main(&s,x,y,comp,req_comp);
> 
>    for(i = 0; i < squareNum; i++)
>    	  EVP_CIPHER_CTX_cleanup(&de[i]);
>    fclose(f);
>    return result;
> }
> 
1069d1226
< 
1158a1316,1386
> //static int decode_block(jpeg *j, short data[64], huffman *hdc, huffman *hac, int b)
> //{
> //   int diff,dc,k;
> //   int t = decode(j, hdc);
> //   if (t < 0) return e("bad huffman code","Corrupt JPEG");
> //
> //   // 0 all the ac values now so we can do it 32-bits at a time
> //   memset(data,0,64*sizeof(data[0]));
> //
> //   diff = t ? extend_receive(j, t) : 0;
> //   dc = j->img_comp[b].dc_pred + diff;
> //   j->img_comp[b].dc_pred = dc;
> //   data[0] = (short) dc;
> //
> //   // decode AC components, see JPEG spec
> //   if(!j->s->decode)  { // normal JPEG encoding
> //	   k = 1;
> //	      do {
> //	         int r,s;
> //	         int rs = decode(j, hac);
> //	         if (rs < 0) return e("bad huffman code","Corrupt JPEG");
> //	         s = rs & 15;
> //	         r = rs >> 4;
> //	         if (s == 0) {
> //	            if (rs != 0xf0) break; // end block
> //	            k += 16;
> //	         } else {
> //	            k += r;
> //	            // decode into unzigzag'd location
> //	           	data[dezigzag[k++]] = (short) extend_receive(j,s);
> //	         }
> //	      } while (k < 64);
> //   }  else  {  // AES decryption
> //	   k = 1;
> //	      do {
> //	         int r,s;
> //	         int rs = decode(j, hac);
> //	         if (rs < 0) return e("bad huffman code","Corrupt JPEG");
> //	         s = rs & 15;
> //	         r = rs >> 4;
> //	         if (s == 0) {
> //	            if (rs != 0xf0) break; // end block
> //	            k += 16;
> //	         } else {
> //	            k += r;
> //	           	 data[k++] = (short) extend_receive(j,s);
> //	         }
> //	      } while (k < 64);
> //
> //	      unsigned char* ciphertext = (unsigned char *)malloc(64);
> //	      	   int ctr;
> //	      	     	for(ctr=0; ctr < 64; ctr++)  {
> //	      	     		ciphertext[ctr] = (unsigned char)(data[ctr]);
> //	      	     	}
> //
> //	      	     	unsigned char* plaintext = (unsigned char *)malloc(64);
> //	      	     	int len = 64;
> //	      	     	plaintext = (unsigned char *)aes_decrypt(&de, ciphertext, &len);
> //
> //	      	     	short auxData[64];
> //	      	     	for(ctr=0; ctr<63; ctr++)
> //	      	     		auxData[ctr] = data[ctr];
> //
> //	      	     	for(ctr=0; ctr < 63; ctr++)  {
> //	      	     		data[dezigzag[ctr]] = (auxData[ctr] & 0xFF00) + plaintext[ctr]; // replace lsbyte with decrypted
> //	      	     	}
> //	      	     	data[63] = 0;
> //   }
> //   return 1;
> //}
> 
1173c1401
<    // decode AC components, see JPEG spec
---
> // decode AC components, see JPEG spec
1175,1189c1403,1418
<    do {
<       int r,s;
<       int rs = decode(j, hac);
<       if (rs < 0) return e("bad huffman code","Corrupt JPEG");
<       s = rs & 15;
<       r = rs >> 4;
<       if (s == 0) {
<          if (rs != 0xf0) break; // end block
<          k += 16;
<       } else {
<          k += r;
<          // decode into unzigzag'd location
<          data[dezigzag[k++]] = (short) extend_receive(j,s);
<       }
<    } while (k < 64);
---
> 	  do {
> 		 int r,s;
> 		 int rs = decode(j, hac);
> 		 if (rs < 0) return e("bad huffman code","Corrupt JPEG");
> 		 s = rs & 15;
> 		 r = rs >> 4;
> 		 if (s == 0) {
> 			if (rs != 0xf0) break; // end block
> 			k += 16;
> 		 } else {
> 			k += r;
> 			// decode into unzigzag'd location
> 			data[dezigzag[k++]] = (short) extend_receive(j,s);
> 		 }
> 	  } while (k < 64);
> 
1192a1422,1552
> static int decode_block_dec(jpeg *j, short data[64], huffman *hdc, huffman *hac, int b, EVP_CIPHER_CTX *decoder)
> {
>    int diff,dc,k;
>    int t = decode(j, hdc);
>    if (t < 0) return e("bad huffman code","Corrupt JPEG");
> 
>    // 0 all the ac values now so we can do it 32-bits at a time
>    memset(data,0,64*sizeof(data[0]));
> 
>    diff = t ? extend_receive(j, t) : 0;
>    dc = j->img_comp[b].dc_pred + diff;
>    j->img_comp[b].dc_pred = dc;
>    data[0] = (short) dc;
> 
>    // AES decryption
> 	   k = 1;
> 	  do {
> 		 int r,s;
> 		 int rs = decode(j, hac);
> 		 if (rs < 0) return e("bad huffman code","Corrupt JPEG");
> 		 s = rs & 15;
> 		 r = rs >> 4;
> 		 if (s == 0) {
> 			if (rs != 0xf0) break; // end block
> 			k += 16;
> 		 } else {
> 			k += r;
> 			 data[k++] = (short) extend_receive(j,s);
> 		 }
> 	  } while (k < 64);
> 
> 
> 	    unsigned char* ciphertext = (unsigned char *)malloc(64);
> 	    int ctr;
> 	    int nonZeroCounter = 0;
> 		for(ctr=0; ctr < 64; ctr++)  {
> 			if(data[ctr] != 0)
> 			{
> 				if(data[ctr] == 1023)
> 					ciphertext[nonZeroCounter] = 0;
> 				else
> 					ciphertext[nonZeroCounter] = (unsigned char)((data[ctr]>>3));
> 				nonZeroCounter++;
> 			}
> 		}
> 
> 		unsigned char* plaintext = (unsigned char *)malloc(64);
> 		int len = nonZeroCounter;
> 		plaintext = (unsigned char *)aes_decrypt(decoder, ciphertext, &len);
> 
> 		short auxData[64];
> 		for(ctr=0; ctr<64; ctr++)
> 			auxData[ctr] = data[ctr];
> 
> 		nonZeroCounter = 0;
> 		for(ctr=0; ctr < 64; ctr++)  {
> 			if(auxData[ctr] == 0) {
> 				data[dezigzag[ctr]] = 0;
> 			} else {
> 			data[dezigzag[ctr]] = (auxData[ctr] & 0x7) + // 3 lsb
> 					((plaintext[nonZeroCounter]&0xFF)<<3) // replace msbyte with decrypted
> 					+ ((plaintext[nonZeroCounter]>>7 & 0x1)*0xF800); // plus sign extension
> 			nonZeroCounter++;
> 			}
> 		}
> 		return 1;
> }
> 
> //static int decode_block_dec(jpeg *j, short data[64], huffman *hdc, huffman *hac, int b)
> //{
> //   int diff,dc,k;
> //   int t = decode(j, hdc);
> //   if (t < 0) return e("bad huffman code","Corrupt JPEG");
> //
> //   short auxData[64];
> //   // 0 all the ac values now so we can do it 32-bits at a time
> //   memset(auxData,0,64*sizeof(data[0]));
> //   memset(data, 0, 64*sizeof(data[0]));
> //
> //   diff = t ? extend_receive(j, t) : 0;
> //   dc = j->img_comp[b].dc_pred + diff;
> //   j->img_comp[b].dc_pred = dc;
> //   auxData[0] = (short) dc;
> //
> //   // AES decryption
> //	   k = 1;
> //	  do {
> //		 int r,s;
> //		 int rs = decode(j, hac);
> //		 if (rs < 0) return e("bad huffman code","Corrupt JPEG");
> //		 s = rs & 15;
> //		 r = rs >> 4;
> //		 if (s == 0) {
> //			if (rs != 0xf0) break; // end block
> //			k += 16;
> //		 } else {
> //			k += r;
> //			 auxData[k++] = (short) extend_receive(j,s);
> //		 }
> //	  } while (k < 64);
> //
> //
> //	    unsigned char* ciphertext = (unsigned char *)malloc(64);
> //	    int ctr;
> //	    int nonZeroCounter = 0;
> //		for(ctr=0; ctr < 64; ctr++)  {
> //			if(auxData[ctr] != 0)
> //			{
> //				if(auxData[ctr] == 1023)
> //					ciphertext[nonZeroCounter] = 0;
> //				else
> //					ciphertext[nonZeroCounter] = (unsigned char)((auxData[ctr]>>3));
> //				nonZeroCounter++;
> //			}
> //		}
> //
> //		unsigned char* plaintext = (unsigned char *)malloc(64);
> //		int len = nonZeroCounter;
> //		plaintext = (unsigned char *)aes_decrypt(&de, ciphertext, &len);
> //
> //		nonZeroCounter = 0;
> //		for(ctr=0; ctr < 64; ctr++)  {
> //			if(auxData[ctr] != 0) { // zeroes already in their place (memset)
> //				data[dezigzag[ctr]] = (auxData[ctr] & 0x7) + ((plaintext[nonZeroCounter]&0xFF)<<3) // replace msbyte with decrypted
> //									+ ((plaintext[nonZeroCounter]>>7 & 0x1)*0xF800); // plus sign extension
> //				nonZeroCounter++;
> //			}
> //		}
> //		return 1;
> //}
> 
1370a1731
> 
1403,1408c1764,1791
<                      if (!decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+z->img_comp[n].ha, n)) return 0;
<                      #ifdef STBI_SIMD
<                      stbi_idct_installed(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data, z->dequant2[z->img_comp[n].tq]);
<                      #else
<                      idct_block(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data, z->dequant[z->img_comp[n].tq]);
<                      #endif
---
> 
>                      // {horiz|vert}{Start|End} are the coordinates in 8x8 blocks.
>                      // Cb and Cr components will have to be downsampled to 16x16.
> 
>                      int willBeDecoded = (z->s->decode ?
>                     		 	 	 	 	 should_square_be_decoded(
> 												   z->s,
> 												   x2/(8*z->img_comp[n].h),
> 												   y2/(8*z->img_comp[n].v) )
> 										   : -1);
>                      if(willBeDecoded != -1)
>                      {
> 						 if (!decode_block_dec(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+z->img_comp[n].ha, n, &de[willBeDecoded])) return 0;
> 						 #ifdef STBI_SIMD
> 						 stbi_idct_installed(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data, z->dequant2[z->img_comp[n].tq]);
> 						 #else
> 						 idct_block(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data, z->dequant[z->img_comp[n].tq]);
> 						 #endif
>                      }
>                      else
>                      {
>                     	 if (!decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+z->img_comp[n].ha, n)) return 0;
> 						 #ifdef STBI_SIMD
> 						 stbi_idct_installed(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data, z->dequant2[z->img_comp[n].tq]);
> 						 #else
> 						 idct_block(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data, z->dequant[z->img_comp[n].tq]);
> 						 #endif
>                      }
